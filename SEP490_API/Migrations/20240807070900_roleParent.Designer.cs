// <auto-generated />
using System;
using DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SEP490_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240807070900_roleParent")]
    partial class roleParent
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Entities.Account", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            ID = "GV0001",
                            IsActive = true,
                            Password = "$2a$11$s7EYYKZzUaLWRzKhaD/UTO2ZMaZmA66UUGwrepR.Y/7G3BEatwP1O",
                            RefreshToken = "",
                            RefreshTokenExpires = new DateTime(2024, 8, 7, 14, 8, 59, 267, DateTimeKind.Local).AddTicks(1392),
                            UserID = new Guid("cb87846a-f54d-4baf-88a2-eccddf1f8162"),
                            Username = "Admin"
                        },
                        new
                        {
                            ID = "GV0002",
                            IsActive = true,
                            Password = "$2a$11$DFkGmDc6FUolUT5yySuS7.vUCOur4yJa8YwcFw1Lmxt/y5lhryIYO",
                            RefreshToken = "",
                            RefreshTokenExpires = new DateTime(2024, 8, 7, 14, 8, 59, 464, DateTimeKind.Local).AddTicks(9978),
                            UserID = new Guid("54554848-78da-4482-924f-eb4e048976f4"),
                            Username = "HomeroomTeacher"
                        },
                        new
                        {
                            ID = "GV0003",
                            IsActive = true,
                            Password = "$2a$11$4/3OXJflD3O.XUGGYu1.oesOzBXRsb8qOjgkeuCvG6tZr72T0eFD.",
                            RefreshToken = "",
                            RefreshTokenExpires = new DateTime(2024, 8, 7, 14, 8, 59, 661, DateTimeKind.Local).AddTicks(8464),
                            UserID = new Guid("80e41fe7-e552-413a-b976-6dc55aa94705"),
                            Username = "SubjectTeacher"
                        },
                        new
                        {
                            ID = "GV0004",
                            IsActive = true,
                            Password = "$2a$11$g8C3m/H.xFNU5TTUAPCAsuGa5A7G4E88qwvSkfOekcAQdRHhK6ZJ6",
                            RefreshToken = "",
                            RefreshTokenExpires = new DateTime(2024, 8, 7, 14, 8, 59, 857, DateTimeKind.Local).AddTicks(4321),
                            UserID = new Guid("f23a5925-a476-4142-85bf-5b087d5b704f"),
                            Username = "Supervisor"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountPermission", b =>
                {
                    b.Property<int>("PermissionID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.HasKey("PermissionID", "AccountID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountPermissions");
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountRole", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.HasKey("RoleID", "AccountID");

                    b.HasIndex("AccountID");

                    b.ToTable("AccountRoles");

                    b.HasData(
                        new
                        {
                            RoleID = 1,
                            AccountID = "GV0001"
                        },
                        new
                        {
                            RoleID = 3,
                            AccountID = "GV0002"
                        },
                        new
                        {
                            RoleID = 4,
                            AccountID = "GV0003"
                        },
                        new
                        {
                            RoleID = 5,
                            AccountID = "GV0004"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountStudent", b =>
                {
                    b.Property<string>("ID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("AccountStudents");
                });

            modelBuilder.Entity("BusinessObject.Entities.ActivityLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("BusinessObject.Entities.Attendance", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Present")
                        .HasColumnType("bit");

                    b.Property<Guid>("ScheduleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("StudentID");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("BusinessObject.Entities.Classes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Classroom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("SchoolYearID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("BusinessObject.Entities.ComponentScore", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("ScoreFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ComponentScores");
                });

            modelBuilder.Entity("BusinessObject.Entities.LessonPlans", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("LessonsPlans");
                });

            modelBuilder.Entity("BusinessObject.Entities.Notification", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CreateBy");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BusinessObject.Entities.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Add Teacher"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Update Teacher"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Delete Teacher"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Get Teacher"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Add Student"
                        },
                        new
                        {
                            ID = 7,
                            Name = "Update Student"
                        },
                        new
                        {
                            ID = 8,
                            Name = "Delete Student"
                        },
                        new
                        {
                            ID = 9,
                            Name = "Get Student"
                        },
                        new
                        {
                            ID = 10,
                            Name = "Add Subject"
                        },
                        new
                        {
                            ID = 11,
                            Name = "Update Subject"
                        },
                        new
                        {
                            ID = 12,
                            Name = "Delete Subject"
                        },
                        new
                        {
                            ID = 13,
                            Name = "Get Subject"
                        },
                        new
                        {
                            ID = 14,
                            Name = "Add Class"
                        },
                        new
                        {
                            ID = 15,
                            Name = "Update Class"
                        },
                        new
                        {
                            ID = 16,
                            Name = "Delete Class"
                        },
                        new
                        {
                            ID = 17,
                            Name = "Get Class"
                        },
                        new
                        {
                            ID = 18,
                            Name = "Add Schedule"
                        },
                        new
                        {
                            ID = 19,
                            Name = "Update Schedule"
                        },
                        new
                        {
                            ID = 20,
                            Name = "Delete Schedule"
                        },
                        new
                        {
                            ID = 21,
                            Name = "Get Schedule"
                        },
                        new
                        {
                            ID = 22,
                            Name = "Add Register Book"
                        },
                        new
                        {
                            ID = 23,
                            Name = "Update Register Book"
                        },
                        new
                        {
                            ID = 24,
                            Name = "Delete Register Book"
                        },
                        new
                        {
                            ID = 25,
                            Name = "Get Register Book"
                        },
                        new
                        {
                            ID = 26,
                            Name = "Add Attendance"
                        },
                        new
                        {
                            ID = 27,
                            Name = "Update Attendance"
                        },
                        new
                        {
                            ID = 28,
                            Name = "Delete Attendance"
                        },
                        new
                        {
                            ID = 29,
                            Name = "Get Attendance"
                        },
                        new
                        {
                            ID = 30,
                            Name = "Add Mark"
                        },
                        new
                        {
                            ID = 31,
                            Name = "Update Mark"
                        },
                        new
                        {
                            ID = 32,
                            Name = "Delete Mark"
                        },
                        new
                        {
                            ID = 33,
                            Name = "Get Mark"
                        },
                        new
                        {
                            ID = 34,
                            Name = "Add Notification"
                        },
                        new
                        {
                            ID = 35,
                            Name = "Update Notification"
                        },
                        new
                        {
                            ID = 36,
                            Name = "Delete Notification"
                        },
                        new
                        {
                            ID = 37,
                            Name = "Get Notification"
                        },
                        new
                        {
                            ID = 38,
                            Name = "Update Setting"
                        },
                        new
                        {
                            ID = 39,
                            Name = "Get Log"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            ID = 2,
                            Name = "Student"
                        },
                        new
                        {
                            ID = 3,
                            Name = "Homeroom Teacher"
                        },
                        new
                        {
                            ID = 4,
                            Name = "Subject Teacher"
                        },
                        new
                        {
                            ID = 5,
                            Name = "Supervisor"
                        },
                        new
                        {
                            ID = 6,
                            Name = "Parent"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.RolePermission", b =>
                {
                    b.Property<int>("PermissionID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("RoleID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("PermissionID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            PermissionID = 1,
                            RoleID = 1
                        },
                        new
                        {
                            PermissionID = 5,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 7,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 9,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 13,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 17,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 21,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 25,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 29,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 33,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 37,
                            RoleID = 2
                        },
                        new
                        {
                            PermissionID = 3,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 5,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 7,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 9,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 13,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 17,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 21,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 23,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 25,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 29,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 37,
                            RoleID = 3
                        },
                        new
                        {
                            PermissionID = 3,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 5,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 7,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 9,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 13,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 17,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 21,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 22,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 23,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 24,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 25,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 26,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 27,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 28,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 29,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 30,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 31,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 32,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 33,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 37,
                            RoleID = 4
                        },
                        new
                        {
                            PermissionID = 2,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 3,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 4,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 5,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 6,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 7,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 8,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 9,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 10,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 11,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 12,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 13,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 14,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 15,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 16,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 17,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 18,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 19,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 20,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 21,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 22,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 23,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 24,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 25,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 26,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 27,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 28,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 29,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 33,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 34,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 35,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 36,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 37,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 38,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 39,
                            RoleID = 5
                        },
                        new
                        {
                            PermissionID = 5,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 7,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 9,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 13,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 17,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 21,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 25,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 29,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 33,
                            RoleID = 6
                        },
                        new
                        {
                            PermissionID = 37,
                            RoleID = 6
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("SlotByDate")
                        .HasColumnType("int");

                    b.Property<int>("SlotByLessonPlans")
                        .HasColumnType("int");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("BusinessObject.Entities.SchoolSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SchoolAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SchoolEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SchoolLevel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SchoolPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.ToTable("SchoolSettings");
                });

            modelBuilder.Entity("BusinessObject.Entities.SchoolYear", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("SchoolYears");
                });

            modelBuilder.Entity("BusinessObject.Entities.Student", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("Birthplace")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FatherProfession")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsMartyrs")
                        .HasColumnType("bit");

                    b.Property<string>("MotherFullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MotherPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MotherProfession")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("BusinessObject.Entities.StudentClasses", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ClassID")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.HasKey("StudentID", "ClassID");

                    b.HasIndex("ClassID");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("BusinessObject.Entities.StudentScores", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IndexColumn")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("SchoolYearID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ScoreFactor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("ID");

                    b.HasIndex("SchoolYearID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentScores");
                });

            modelBuilder.Entity("BusinessObject.Entities.Subject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("IsBachelor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDoctor")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMaster")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsProfessor")
                        .HasColumnType("bit");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = new Guid("cb87846a-f54d-4baf-88a2-eccddf1f8162"),
                            Address = "600 Nguyễn Văn Cừ",
                            Avatar = "https://cantho.fpt.edu.vn/Data/Sites/1/media/logo-moi.png",
                            Birthday = new DateTime(2024, 8, 7, 14, 8, 59, 60, DateTimeKind.Local).AddTicks(2913),
                            Email = "admin@fpt.edu.vn",
                            Fullname = "Lê Văn Admin",
                            Gender = "Nam",
                            IsBachelor = false,
                            IsDoctor = false,
                            IsMaster = false,
                            IsProfessor = false,
                            Nation = "Kinh",
                            Phone = "0987654321"
                        },
                        new
                        {
                            ID = new Guid("54554848-78da-4482-924f-eb4e048976f4"),
                            Address = "600 Nguyễn Văn Cừ",
                            Avatar = "https://cantho.fpt.edu.vn/Data/Sites/1/media/logo-moi.png",
                            Birthday = new DateTime(2024, 8, 7, 14, 8, 59, 267, DateTimeKind.Local).AddTicks(1495),
                            Email = "admin@fpt.edu.vn",
                            Fullname = "Lê Văn Admin",
                            Gender = "Nam",
                            IsBachelor = false,
                            IsDoctor = false,
                            IsMaster = false,
                            IsProfessor = false,
                            Nation = "Kinh",
                            Phone = "0987654321"
                        },
                        new
                        {
                            ID = new Guid("80e41fe7-e552-413a-b976-6dc55aa94705"),
                            Address = "600 Nguyễn Văn Cừ",
                            Avatar = "https://cantho.fpt.edu.vn/Data/Sites/1/media/logo-moi.png",
                            Birthday = new DateTime(2024, 8, 7, 14, 8, 59, 465, DateTimeKind.Local).AddTicks(216),
                            Email = "admin@fpt.edu.vn",
                            Fullname = "Lê Văn Admin",
                            Gender = "Nam",
                            IsBachelor = false,
                            IsDoctor = false,
                            IsMaster = false,
                            IsProfessor = false,
                            Nation = "Kinh",
                            Phone = "0987654321"
                        },
                        new
                        {
                            ID = new Guid("f23a5925-a476-4142-85bf-5b087d5b704f"),
                            Address = "600 Nguyễn Văn Cừ",
                            Avatar = "https://cantho.fpt.edu.vn/Data/Sites/1/media/logo-moi.png",
                            Birthday = new DateTime(2024, 8, 7, 14, 8, 59, 661, DateTimeKind.Local).AddTicks(8686),
                            Email = "admin@fpt.edu.vn",
                            Fullname = "Lê Văn Admin",
                            Gender = "Nam",
                            IsBachelor = false,
                            IsDoctor = false,
                            IsMaster = false,
                            IsProfessor = false,
                            Nation = "Kinh",
                            Phone = "0987654321"
                        });
                });

            modelBuilder.Entity("BusinessObject.Entities.Account", b =>
                {
                    b.HasOne("BusinessObject.Entities.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("BusinessObject.Entities.Account", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountPermission", b =>
                {
                    b.HasOne("BusinessObject.Entities.Account", "Account")
                        .WithMany("AccountPermissions")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Permission", "Permission")
                        .WithMany("AccountPermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountRole", b =>
                {
                    b.HasOne("BusinessObject.Entities.Account", "Account")
                        .WithMany("AccountRoles")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Role", "Role")
                        .WithMany("AccountRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountStudent", b =>
                {
                    b.HasOne("BusinessObject.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Student", "Student")
                        .WithMany("AccountStudents")
                        .HasForeignKey("UserID");

                    b.Navigation("Role");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObject.Entities.ActivityLog", b =>
                {
                    b.HasOne("BusinessObject.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Entities.Attendance", b =>
                {
                    b.HasOne("BusinessObject.Entities.Schedule", "Schedule")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.AccountStudent", "AccountStudent")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStudent");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("BusinessObject.Entities.Classes", b =>
                {
                    b.HasOne("BusinessObject.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Account", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SchoolYear");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Entities.ComponentScore", b =>
                {
                    b.HasOne("BusinessObject.Entities.Subject", "Subject")
                        .WithMany("ComponentScores")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Entities.LessonPlans", b =>
                {
                    b.HasOne("BusinessObject.Entities.Subject", "Subject")
                        .WithMany("LessonPlans")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BusinessObject.Entities.Notification", b =>
                {
                    b.HasOne("BusinessObject.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Entities.RolePermission", b =>
                {
                    b.HasOne("BusinessObject.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Entities.Schedule", b =>
                {
                    b.HasOne("BusinessObject.Entities.Classes", "Classes")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Subject", "Subject")
                        .WithMany("Schedules")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.Account", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classes");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Entities.SchoolSetting", b =>
                {
                    b.HasOne("BusinessObject.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Entities.StudentClasses", b =>
                {
                    b.HasOne("BusinessObject.Entities.Classes", "Classes")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.AccountStudent", "AccountStudent")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStudent");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BusinessObject.Entities.StudentScores", b =>
                {
                    b.HasOne("BusinessObject.Entities.SchoolYear", "SchoolYear")
                        .WithMany()
                        .HasForeignKey("SchoolYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Entities.AccountStudent", "AccountStudent")
                        .WithMany("Scores")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountStudent");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("BusinessObject.Entities.Account", b =>
                {
                    b.Navigation("AccountPermissions");

                    b.Navigation("AccountRoles");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BusinessObject.Entities.AccountStudent", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("BusinessObject.Entities.Classes", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("BusinessObject.Entities.Permission", b =>
                {
                    b.Navigation("AccountPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BusinessObject.Entities.Role", b =>
                {
                    b.Navigation("AccountRoles");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BusinessObject.Entities.Schedule", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("BusinessObject.Entities.SchoolYear", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("BusinessObject.Entities.Student", b =>
                {
                    b.Navigation("AccountStudents");
                });

            modelBuilder.Entity("BusinessObject.Entities.Subject", b =>
                {
                    b.Navigation("ComponentScores");

                    b.Navigation("LessonPlans");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BusinessObject.Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
